package com.company;
import java.io.*;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.Scanner;

public class Main{
    // выводит список всех файлов и директорий для `path` - ls
    public static void listDirectory(String path) {
        try {
            File f = new File(path);
            String[] files = f.list();
            for (int i = 0; i < files.length-1; i++) {
                System.out.println(files[i]);
            }
        }
        catch (Exception e) {
            System.err.println(e.getMessage());
        }
    };
    // выводит список файлов с расширением `.py` в `path` - ls_py
    public static void listPythonFiles(String path) {
        File files = new File(path);
        for(File i : files.listFiles()){
            if(i.getName().endsWith(".py")){
                System.out.print(i.getName());
            }
        }
    };
    // выводит `true`, если `path` это директория, в других случаях `false` - id_dir
    public static void isDirectory(String path) {
        File f = new File(path);
        if (f.isDirectory())
            System.out.println("true");
        else
            System.out.println("false");
    };
    // выводит `директория` или `файл` в зависимости от типа `path` - define
    public static void define(String path) {
        File f = new File(path);
        if (f.isDirectory())
            System.out.println("директория");
        else
            System.out.println("өайл");

    };
    // выводит права для файла в формате `rwx` для текущего пользователя - readmod
    public static void printPermissions(String path) {
        File file = new File(path);
        if(file.canRead()){
            System.out.print("r");
        }
        else{
            System.out.print("-");
        }
        if(file.canWrite()){
            System.out.print("w");
        }
        else{
            System.out.print("-");
        }
        if(file.canExecute()){
            System.out.print("x");
        }
        else{
            System.out.print("-");
        }
    };
    // устанавливает права для файла `path` - setmod
    public static void setPermissions(String path, String permissions) {
        File file = new File(path);
        String perm=permissions;
        if(perm.charAt(0)=='r'){
            file.setReadable(true);
        }
        else if(perm.charAt(0)=='-'){
            file.setReadable(false);
        }
        if(perm.charAt(1)=='w'){
            file.setWritable(true);
        }
        else if(perm.charAt(1)=='-'){
            file.setWritable(false);
        }
        if(perm.charAt(2)=='x'){
            file.setExecutable(true);
        }
        else if(perm.charAt(2)=='-'){
            file.setExecutable(false);
        }
    };
    // выводит контент файла - cat
    public static void printContent(String path) {
        File file = new File(path);
        try {
            Scanner f = new Scanner(file);
            while(f.hasNextLine()){
                System.out.println(f.nextLine());
            }
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }

    };
    // добавляет строке `# Autogenerated line` в конец `path` - append
    public static void appendFooter(String path) {
        try {
            FileWriter fileWriter = new FileWriter(path, true);
            fileWriter.write("\n`# Autogenerated line`");
            fileWriter.close();
        } catch (IOException e) {
            e.printStackTrace();
        }

    };
    // создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`. `path` может быть директорией или файлом. При директории, копируется весь контент. - bc
    public static void createBackup(String path) {
        File file = new File(path);
        LocalDate date = LocalDate.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd-mm-yyyy");
        String rightDate = formatter.format(date);
        String backupDestinationDirectory = String.format("/tmp/${date}.backup", rightDate);
        String backupDestinationFile = String.format("/tmp/${date}.backup/%s", rightDate, file.getName());
        File destination = new File(backupDestinationDirectory);
        if(!destination.exists()){
            destination.mkdirs();
        }
        try {
            Files.copy(Paths.get(path), Paths.get(backupDestinationFile), StandardCopyOption.REPLACE_EXISTING);
        } catch (IOException e) {
            e.printStackTrace();
        }
    };
    // выводит самое длинное слово в файле - greplong
    public static void printLongestWord(String path) {
        String temp;
        String result = "";
        try {
            Scanner word = new Scanner(new File(path));
            while(word.hasNext()){
                temp=word.next();
                if(temp.length()>result.length()){
                    result=temp;
                }
            }
            System.out.print(result);
        } catch (FileNotFoundException e) {
            e.printStackTrace();
        }
    };
    // выводит список команд и их описание - help
    public static void help() {
        System.out.println("MyFS 1.0 команды:\n" +
            "ls <path>               выводит список всех файлов и директорий для `path`\n" +
            "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
            "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
            "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
            "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
            "setmod <path> <perm>    устанавливает права для файла `path`\n" +
            "cat <path>              выводит контент файла\n" +
            "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
            "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
            "greplong <path>         выводит самое длинное слово в файле\n" +
            "help                    выводит список команд и их описание\n" +
            "exit                    завершает работу программы");
    };
    // завершает работу программы - exit
    public static void exit() {
        System.out.println("Goodbye");
    };
    public static void main(String[] args) {

        System.out.println("MyFS 1.0 команды:\n" +
                "ls <path>               выводит список всех файлов и директорий для `path`\n" +
                "ls_py <path>            выводит список файлов с расширением `.py` в `path`\n" +
                "is_dir <path>           выводит `true`, если `path` это директория, в других случаях `false`\n" +
                "define <path>           выводит `директория` или `файл` в зависимости от типа `path`\n" +
                "readmod <path>          выводит права для файла в формате `rwx` для текущего пользователя\n" +
                "setmod <path> <perm>    устанавливает права для файла `path`\n" +
                "cat <path>              выводит контент файла\n" +
                "append <path>           добавляет строку `# Autogenerated line` в конец `path`\n" +
                "bc <path>               создает копию `path` в директорию `/tmp/${date}.backup` где, date - это дата в формате `dd-mm-yyyy`\n" +
                "greplong <path>         выводит самое длинное слово в файле\n" +
                "help                    выводит список команд и их описание\n" +
                "exit                    завершает работу программы");

        Scanner input = new Scanner(System.in);
        while(true) {
            String command = input.nextLine();
            String[] arrayCommand = command.split(" ");
            String path = arrayCommand[1];
            if(command.equals("exit")){
                exit();
                return;
            }
            else if (command.equals("help")){
                help();
            }
            else if(arrayCommand[0].equals("ls")){
                listDirectory(path);
            }
            else if(arrayCommand[0].equals("ls_py")){
                listPythonFiles(path);
            }
            else if(arrayCommand[0].equals("is_dir")){
                isDirectory(path);
            }
            else if(arrayCommand[0].equals("define")){
                define(path);
            }
            else if(arrayCommand[0].equals("readmod")){
                printPermissions(path);
            }
            else if(arrayCommand[0].equals("setmod")){
                setPermissions(path, arrayCommand[2]);
            }
            else if(arrayCommand[0].equals("cat")){
                printContent(path);
            }
            else if(arrayCommand[0].equals("append")){
                appendFooter(path);
            }
            else if(arrayCommand[0].equals("bc")){
                createBackup(path);
            }
            else if(arrayCommand[0].equals("greplong")){
                printLongestWord(path);
            }
        }
    }
}
